scalar Date

type PartnerRequest @entity {
  _id: ID! @id
  partner: Partner! @link @map(path: "partnerId")
  createdAt: Date! @column
  request: String! @column
}

type Partner @entity {
  _id: ID! @id
  firstName: String! @column
  lastName: String! @column
  requests: [PartnerRequest!]!
}

type ScheduleDay @entity {
  _id: ID! @id
  schedule: Schedule! @link @map(path: "scheduleId")
  dayId: Int! @column
  partners: [Partner!]! @link
  isSkipped: Boolean! @column
}

type Schedule @entity {
  _id: ID! @id
  month: Date! @column
  completedDays: Int! @column
  days: [ScheduleDay!]!
}

type Query {
  partners: [Partner!]!
  schedule(month: Date!): Schedule!
}

input CreatePartnerRequestInput {
  partnerId: String!
  request: String!
}

input DeletePartnerRequestInput {
  partnerRequestId: String!
}
type DeletePartnerRequestPayload {
  partnerRequestId: String!
}

input CompleteDayInput {
  scheduleId: String!
  completedDays: Int!
}

input SkipDayInput {
  scheduleId: String!
  dayId: Int!
  isSkipped: Boolean!
}

type Mutation {
  createPartnerRequest(input: CreatePartnerRequestInput!): PartnerRequest!
  deletePartnerRequest(input: DeletePartnerRequestInput!): DeletePartnerRequestPayload!

  completeDay(input: CompleteDayInput!): Schedule!
  skipDay(input: SkipDayInput!): Schedule!
}
