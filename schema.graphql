scalar Date

type Partner @entity {
  _id: ID! @id
  firstName: String! @column
  lastName: String! @column
}

type ScheduleDay @entity {
  _id: ID! @id
  schedule: Schedule! @link @map(path: "scheduleId")
  dayId: Int! @column
  partners: [Partner!]! @link
  isSkipped: Boolean! @column
}

type Schedule @entity {
  _id: ID! @id
  month: Date! @column
  completedDays: Int! @column
  days: [ScheduleDay!]!
}

type Query {
  partners: [Partner]
  schedule(month: Date!): Schedule
}

input CompleteDayInput {
  month: Date!
  completedDays: Int!
}

input SkipDayInput {
  month: Date!
  dayId: Int!
  isSkipped: Boolean!
}

type Mutation {
  completeDay(input: CompleteDayInput!): Schedule
  skipDay(input: SkipDayInput!): Schedule
}
